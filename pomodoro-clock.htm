<html>
<head>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <title>TBD</title>
  <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
</head>
<body>

  <div class="container">
    
    <div id="timer"></div>

    <button type="button" class="btn btn-primary" id="start-pomodoro">(Re)Start Pomodoro</button>
    <button type="button" class="btn btn-primary" id="pause-timer">Pause/Resume</button>
    <button type="button" class="btn btn-primary" id="take-break">Take a break</button>

  </div>

<script>
  var Clock = function() {
    var self = this;

    var State = {
      Pomodoro: "Pomodoro",
      Break: "Break"
    };

    var INTERVAL = 500;

    var state = State.Pomodoro;
    var running = false;
    var elapsedTime = 0;
    var lastDateTime = 0;

    self.pomodoroSeconds = 15;
    self.breakSeconds = 5*60;
    
    self.tickCallback = function() {
    };

    self.resetTimer = function() {
      elapsedTime = 0;
    };

    var getCurrentDateTime = function() {
      return new Date().getTime();
    };

    self.startPomodoro = function() {
      state = State.Pomodoro;
      lastDateTime = getCurrentDateTime();
      running = true;
    };

    self.pause = function() {
      lastDateTime = getCurrentDateTime();
      running = false;
    };

    self.pauseOrResume = function() {
      lastDateTime = getCurrentDateTime();
      running = !running;
    };

    self.startBreak = function() {
      state = State.Break;
      lastDateTime = getCurrentDateTime();
      running = true;
    };

    self.getElapsedTime = function() {
      return elapsedTime;
    };

    self.getRemainingTime = function() {
      var endSeconds = self.pomodoroSeconds;
      if (state == State.Break) {
        endSeconds = self.breakSeconds;
      }

      return endSeconds * 1000 - elapsedTime;
    };

    self.timeIsFinished = function() {
      if (self.getRemainingTime() < INTERVAL / 2) {
        return true;
      }

      return false;
    };

    self.showFinish = function() {
      alert(state + " finished!");
      console.log(state + " finished!");
    };

    
    window.setInterval(function() {
      if (running) {
        var currentDateTime = getCurrentDateTime();
        elapsedTime += currentDateTime - lastDateTime;
        lastDateTime = currentDateTime;

        if (self.timeIsFinished()) {
          running = false;
          self.showFinish();
        }

        self.tickCallback();
      }
    }, INTERVAL);
  };

  var clock = new Clock();

  $(function() {
    clock.tickCallback = function() {
      var remainingTime = clock.getRemainingTime();

      $("#timer").text(Math.round(remainingTime/1000));
    };

    $("#start-pomodoro").click(function() {
      clock.pause();
      clock.resetTimer();
      clock.startPomodoro();
    });

    $("#pause-timer").click(function() {
      clock.pauseOrResume();
    });

    $("#take-break").click(function() {
      clock.pause();
      clock.resetTimer();
      clock.startBreak();
    });
  });
</script>
</body>
</html>

